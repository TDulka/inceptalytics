# -*- coding: utf-8 -*-
"""INCEpTION - Working with exported projects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDyHheAh0hX308vykky90UUU7X9wcuTd
"""

!pip install dkpro-cassis
!pip install pandas

# !curl -o project.zip https://inception-project.github.io/example-projects/search/Example+A+Knowledge+Supported+Search_2019-04-28.zip
# !curl -o project.zip https://inception-project.github.io/example-projects/lener-br/Example+A+Named+entity+recommendation+on+Brazilian+Legal+Text_2019-08-16_1139.zip
!curl -o project.zip https://inception-project.github.io/example-projects/concept-linking/Example_Concept+Linking_2019-03-26_1502.zip

from collections import defaultdict
import json
import re
from typing import Any, Dict, List, Set
from zipfile import ZipFile

import pandas as pd

class Project:
  def __init__(self, project_file: str):
    self.project_file = project_file
    self._json = None

  def json(self) -> Dict[str, Any]:
    if self._json is None:
      project_json_selector = re.compile("[^/]+\.json")
      with ZipFile(self.project_file) as archive:
        project_json_filename = next(f for f in archive.namelist() if project_json_selector.fullmatch(f))
        with archive.open(project_json_filename) as project_json_file:
          self._json = json.load(project_json_file)

    return self._json

  def users(self) -> List[str]:
    return sorted(list(set(permission['user'] for permission in self.json()['project_permissions'])))

  def files(self) -> List[str]:
    with ZipFile(self.project_file) as archive:
      return archive.namelist()

  def knowledge_bases(self) -> List[str]:
    return [e for e in self.files() if e.startswith("kb")]

  def source_files(self) -> List[str]:
    return [e for e in self.files() if e.startswith("source/")]

  def annotated_files(self) -> Dict[str, List[str]]:
    result = defaultdict(list)
    for e in self.files():
      if e.startswith("annotation/") and e.count("/") == 2:
        sourcedoc = "/".join(e.split("/")[:-1])
        result[sourcedoc].append(e)

    return result

  def events(self) -> pd.DataFrame:
    with ZipFile(self.project_file) as archive:
        with archive.open("event.log") as f:
            lines = [json.loads(x) for x in f]

            df = pd.json_normalize(lines)

    return df

  def events_of_type(self, event_type: str) -> pd.DataFrame:
    df = self.events()
    return df[df["event"] == event_type]



project = Project("project.zip")

print(project.users())
print(project.files())
print()

print("Source files:")
print(project.source_files())
print()

print("Annotated files:")
for k, v in project.annotated_files().items():
  print(k, "->", v)

  print()
print()

print(project.knowledge_bases())
print()

# Events

print("Events:")
for _, row in project.events().iterrows():
  print(dict(row.dropna()))

print()
print("DocumentOpenedEvent:")
print([dict(row.dropna()) for _, row in project.events_of_type("DocumentOpenedEvent").iterrows()])